{"posts":[{"title":"js判断移动设备、pc端、android、iPhone、是否为微信、微博、qq空间","text":"因为项目要经常用要判断移动设备、pc端、android、iPhone、是否为微信、微博、qq空间等，这里记录一下各端环境的判断方法。 123456789101112131415161718192021222324252627282930313233343536373839404142var browser = { versions: function () { var u = navigator.userAgent, app = navigator.appVersion; // 移动终端浏览器版本信息 return { trident: u.indexOf('Trident') &gt; -1, //IE内核 presto: u.indexOf('Presto') &gt; -1, //opera内核 webKit: u.indexOf('AppleWebKit') &gt; -1, //苹果、谷歌内核 gecko: u.indexOf('Gecko') &gt; -1 &amp;&amp; u.indexOf('KHTML') == -1, //火狐内核 mobile: !!u.match(/AppleWebKit.*Mobile.*/), //是否为移动终端 ios: !!u.match(/\\(i[^;]+;( U;)? CPU.+Mac OS X/), //ios终端 android: u.indexOf('Android') &gt; -1 || u.indexOf('Linux') &gt; -1, //android终端或uc浏览器 iPhone: u.indexOf('iPhone') &gt; -1, //是否为iPhone或者QQHD浏览器 iPad: u.indexOf('iPad') &gt; -1, //是否iPad webApp: u.indexOf('Safari') == -1 //是否web应用程序，没有头部与底部 }; }(), language: (navigator.browserLanguage || navigator.language).toLowerCase()}if (browser.versions.mobile) { //判断是否是移动设备打开。browser代码在下面 var ua = navigator.userAgent.toLowerCase();//获取判断用的对象 if (ua.match(/MicroMessenger/i) == &quot;micromessenger&quot;) { // 在微信中打开 } if (ua.match(/WeiBo/i) == &quot;weibo&quot;) { // 在新浪微博客户端打开 } if (ua.match(/QQ/i) == &quot;qq&quot;) { // 在QQ空间打开 } if (browser.versions.ios) { // 是否在IOS浏览器打开 } if(browser.versions.android){ // 是否在安卓浏览器打开 }}else { // 否则就是PC浏览器打开}","link":"/2017/02/18/%E5%89%8D%E7%AB%AF/2017-02-18_js%E5%88%A4%E6%96%AD%E7%A7%BB%E5%8A%A8%E8%AE%BE%E5%A4%87%E3%80%81pc%E7%AB%AF%E3%80%81android%E3%80%81iPhone%E3%80%81%E6%98%AF%E5%90%A6%E4%B8%BA%E5%BE%AE%E4%BF%A1%E3%80%81%E5%BE%AE%E5%8D%9A%E3%80%81qq%E7%A9%BA%E9%97%B4%20copy/"},{"title":"web项目开发规范整理总结","text":"最近开发了两个项目，基于在php中嵌入html的模式开发的，所以总结了些规范，可能不对，如有错误，欢迎指正。 类、函数、变量名命名：1、定义类时，全部拼音的首字母必须大写；如Person，ClassDemo；（帕斯卡命名法）；也可以用带下斜杆的匈牙利命名法进行命名，如 head_navigation。 2、在命名函数时，第一个单词的首字母小写，之后每个单词的首字母大写，如printInfo()方法；（驼峰命名法） 3、php的变量名的标识符：不能以数字开头，可以由英文字母、数字和下划线（_）组成，不能是保留关键字，区分大小写；但是内置结构和关键字以及用户自定义的类名和函数名都是不区分大小写的。 4、Javascript变量名称规则：变量对大小写敏感，区分大小写【y与Y是不同变量】；变量必须以字母或者下划线开头。 文件夹与文件名命名：建立php程序文件名和目录名的命名均使用有意义的英文方式命名，不使用拼音或无意义的英文命名，同时必须均使用小写英文，多个词之间使用_链接。 系统结构： 安全规则：1、对敏感数据的传输要采用https。 2、logs:确保对关键用户操作保存了完整的用户访问记录； 3、对内部使用或供合作者使用的产品， 要考虑增加访问控制； 4、严格的过滤和合法性验证:不推荐使用直接的$_POST和$_GET的方式进行获取参数，而是通过XXX_yiv的方式获取和过滤处理。（类似thinkPHP的I函数）； 5、先声明再使用：php的代码要求先声明再使用，否则会出错。 html:1、xhtml区分大小写，xhtml要求标签名、属性名、值都要小写，并且要有双引号和标签闭合。因为XHTML文档是XML应用产物，XML是区分大小写的，所以和会被认为是两种不同的标签； 2、语义化：使用符合语义的标签书写 HTML 文档, 选择恰当的元素表达所需的含义； 结构性元素 p 表示段落. 只能包含内联元素, 不能包含块级元素； li 本身无特殊含义, 可用于布局. 几乎可以包含任何元素； br 表示换行符； hr 表示水平分割线； h1-h6 表示标题. 其中 h1 于表示当前页面最重要的内容的标题; blockquote 表示引用, 可以包多个段落. 请勿纯粹为了缩进而使用blockquote, 大部分浏览器默认将 blockquote 渲染为带有左右缩进; pre 表示一段格式化好的文本； 头部元素 title 每个页面必须有且仅有一个 title 元素; base 可用场景：首页、频道等大部分链接都为新窗口打开的页面; link用于引入 css 资源时, 可省去 media(默认为all) 和 type(默认为text/css) 属性; style type 默认为 text/css, 可以省去; script type 属性可以省去; 不赞成使用lang属性; 不要使用古老的&lt;!– //–&gt;这种hack脚本, 它用于阻止第一代浏览器(Netscape 1和Mosaic)将脚本显示成文字; noscript 在用户代理不支持 JavaScript 的情况下提供说明； 文本元素 a 存在 href 属性时表示链接, 无 href 属性但有 name 属性表示锚点; em,strong em 表示句意强调, 加与不加会引起语义变化, 可用于表示不同的心情或语调;strong 表示重要性强调, 可用于局部或全局, strong强调的是重要性, 不会改变句意; abbr 表示缩写; sub,sup 主要用于数学和化学公式, sup还可用于脚注; span 本身无特殊含义; ins,del 分别表示从文档中增加(插入)和删除； 媒体元素 img 请勿将img元素作为定位布局的工具, 不要用他显示空白图片; 必要时给img元素增加alt属性; object 可以用来插入Flash; 列表元素 dl 表示关联列表, dd是对dt的解释; dt和dd的对应关系比较随意：一个dt对应多个dd、多个dt对应一个dd、多个dt对应多个dd, 都合法; 可用于名词/单词解释、日程列表、站点目录 ul 表示无序列表; ol 表示有序列表, 可用于排行榜等; li 表示列表项, 必须是ul/ol的子元素; 表单元素 推荐使用 button 代替 input, 但必须声明 type; 推荐使用 fieldset, legend 组织表单； 表单元素的 name 不能设定为 action, enctype, method, novalidate, target, submit 会导致表单提交混乱； 大小写，属性值：元素的标签名和属性值都必须为小写，属性值必须加双引号。 css:1、缩进：使用一个tab（四个空格）； 2、分号：每个属性声明末尾都要加分号； 3、空格：（1）不需要空格的情况：属性名后；多个规则的，前；*!important !后；行末不要有多余的空格。（2）需要空格的情况：属性值前；选择器&gt;,+,~前后；{ 前；*!important !前；*@else 前后；* 属性值中的，前；*注释/*后 */前； 4、空行：（1）、文件最后保留一个空行（2）}最好跟一个空行； 5、换行：（1）不需要换行：{ 前； （2）需要换行： *{后和}前 ； 每个属性独占一行；多个规则的分割符，后； 6、注释：*统一用/**/； 缩进与下一行代码保持一致 ；可位于一个代码的末尾，与代码间隔一个空格； 7、引号： 最外层统一使用双引号；url要用双引号；*选择器中的属性值要用双引号； 8、命名：*css中的元素名称，id和类的命名也是区分大小写的 ; 类名用小写字母，以中划线-分割，匈牙利命名法；id用驼峰命名法； 9、属性声明：相关的属性声明做分组处理，组与组之间空一行； 10、颜色：使用颜色16进制小写字母，且尽量简写 如 #666； 11、属性简写：属性简写需要你非常清楚属性值的正确顺序，而且在大多数情况下并不需要设置属性简写中包含的所有值，所以建议尽量分开声明会更加清晰；margin 和 padding 相反，需要使用简写； 12、另外项：不允许有空的规则；元素选择器要用小写；去掉小数点前面的0；属性值0后面不加单位；禁止滥用！important;无前缀的标准属性应写在有前缀的前面；尽量少使用*选择器；用border:0代替border:none。 图片规范1、所有的元素类图片均放在images中； 2、命名全部用小写英文字母/数字/_的组合，其中不得包含汉字/空格/特殊字符；尽量使用易懂的词汇； 3、在保证视觉效果的情况下选择最小的图片格式与图片质量，以减少加载时间； 4、运用css sprite 技术集中小的背景图或图标，减少页面http请求，但注意请务必在对应的sprite psd 源图中画参画参考线； 。。。。。。。 以后遇到一些要注意的地方再添加上。","link":"/2016/12/15/%E5%89%8D%E7%AB%AF/2016-12-15_web%E9%A1%B9%E7%9B%AE%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83%E6%95%B4%E7%90%86%E6%80%BB%E7%BB%93/"},{"title":"js获取url参数的值","text":"因为项目要经常获取url参数的值，所以封装个方法记录一下。 123456789101112// 获取url参数函数function GetQueryString(name){ var reg = new RegExp(&quot;(^|&amp;)&quot;+ name +&quot;=([^&amp;]*)(&amp;|$)&quot;); // match()方法可在 字符串内检索指定的值，或找到一个或多个正则表达式的匹配 var r = window.location.search.substr(1).match(reg); if(r!=null){ return unescape(r[2]); }else{ return null; }} 如果我们的url=http://www.qingwa.com?id=10&amp;p=3 那我们直接通过函数就可以取到id和p的值，如下： 123var id = GetQueryString(&quot;id&quot;);var id = GetQueryString(&quot;p&quot;); 无论url后面加多少参数，直接通过上面函数获取即可。","link":"/2017/03/26/%E5%89%8D%E7%AB%AF/2017-03-26_js%E8%8E%B7%E5%8F%96url%E5%8F%82%E6%95%B0%E7%9A%84%E5%80%BC/"},{"title":"js Date对象的使用","text":"JavaScript中的Date对象用于处理日期和时间。它允许您获取当前日期和时间，设置特定日期和时间，以及执行日期和时间的各种操作。 1234567891011121314151617181920212223242526272829// 获取当前时间，Tue Feb 07 2017 17:28:35 GMT+0800 (中国标准时间)var now = new Date(); // 2017，年份now.getFullYear(); // 1，月份的范围是0-11,1是表示2月份now.getMonth(); // 07，日now.getDate(); // 2，星期二now.getDay(); // 17，小时，24小时制now.getHours(); // 28，分钟now.getMinutes(); // 35，秒now.getSeconds(); // 774，毫秒now.getMilliseconds(); // 1486459715774,获取时间戳now.getTime(); 情人节想和女票出去吃一顿。。。。。 1234567891011121314151617var now = new Date();var time = now.getTime();var year = now.getFullYear();var month = now.getMonth();var date = now.getDate();var day = now.getDay();var hours = now.getHours();var minutes = now.getMinutes();var seconds = now.getSeconds();var milliseconds = now.getMilliseconds();//情人节是几月几号来着...if (month===1 &amp;&amp; date===14) { alert('小妞，出来吧，我在餐厅定了位！');}else { alert('每天都是情人节,我们就在家吃吧！');} 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124// 格式化日期：yyyy-MM-dd function formatDate(date) { var myyear = date.getFullYear(); var mymonth = date.getMonth()+1; var myweekday = date.getDate(); if(mymonth &lt; 10){ mymonth = &quot;0&quot; + mymonth; } if(myweekday &lt; 10){ myweekday = &quot;0&quot; + myweekday; } return (myyear+&quot;-&quot;+mymonth + &quot;-&quot; + myweekday); } // 获得某月的天数 function getMonthDays(paraYear,paraMonth){ var monthStartDate=new Date(paraYear, paraMonth, 1); var monthEndDate=new Date(paraYear, paraMonth + 1, 1); var days=(monthEndDate-monthStartDate)/(1000*60*60*24); return days; } // 获得某周的开始日期 function getWeekStartDate(paraYear,paraMonth,paraDay,paraDayOfWeek) { var weekStartDate = new Date(paraYear, paraMonth, paraDay + 1 - paraDayOfWeek); return formatDate(weekStartDate); } // 获得某周的结束日期 function getWeekEndDate(paraYear,paraMonth,paraDay,paraDayOfWeek) { var weekEndDate = new Date(paraYear, paraMonth, paraDay + (7 - paraDayOfWeek)); return formatDate(weekEndDate); } // 获得某月的开始日期 function getMonthStartDate(paraYear,paraMonth){ var monthStartDate = new Date(paraYear, paraMonth, 1); return formatDate(monthStartDate); } // 获得某月的结束日期 function getMonthEndDate(paraYear,paraMonth){ var monthEndDate = new Date(paraYear,paraMonth, getMonthDays(paraYear,paraMonth)); return formatDate(monthEndDate); } // 获得上月开始时间 function getLastMonthStartDate(paraYear, lastMonth){ var lastMonthStartDate = new Date(paraYear, lastMonth, 1); return formatDate(lastMonthStartDate); } // 获得上月结束时间 function getLastMonthEndDate(paraYear, lastMonth, lastMonth){ var lastMonthEndDate = new Date(paraYear, lastMonth, getMonthDays(lastMonth)); return formatDate(lastMonthEndDate); } // 获得某季度的开始日期 function getQuarterStartDate(paraYear,paraSeason){ switch (paraSeason){ case '1' : return paraYear+&quot;-01-01&quot;; case '2' : return paraYear+&quot;-04-01&quot;; case '3' : return paraYear+&quot;-07-01&quot;; case '4' : return paraYear+&quot;-10-01&quot;; }} // 获得某季度的结束日期 function getQuarterEndDate(paraYear,paraSeason){ switch (paraSeason){ case '1' : return paraYear+&quot;-03-31&quot;; case '2' : return paraYear+&quot;-06-30&quot;; case '3' : return paraYear+&quot;-09-30&quot;; case '4' : return paraYear+&quot;-12-31&quot;; } }// 获取某年某周的开始日期function getBeginDateOfWeek(paraYear, weekIndex){ var firstDay = GetFirstWeekBegDay(paraYear); // 7*24*3600000 是一星期的时间毫秒数,(JS中的日期精确到毫秒) var time=(weekIndex-1)*7*24*3600000; var beginDay = firstDay; // 为日期对象 date 重新设置成时间 time beginDay.setTime(firstDay.valueOf()+time); return formatDate(beginDay);}//获取某年某周的结束日期function getEndDateOfWeek(paraYear, weekIndex){ var firstDay = GetFirstWeekBegDay(paraYear); // 7*24*3600000 是一星期的时间毫秒数,(JS中的日期精确到毫秒) var time=(weekIndex-1)*7*24*3600000; var weekTime = 6*24*3600000; var endDay = firstDay; // 为日期对象 date 重新设置成时间 time endDay.setTime(firstDay.valueOf()+weekTime+time); return formatDate(endDay);}// 获取日期为某年的第几周function GetWeekIndex(dateobj) { var firstDay = GetFirstWeekBegDay(dateobj.getFullYear()); if (dateobj &lt; firstDay) { firstDay = GetFirstWeekBegDay(dateobj.getFullYear() - 1); } d = Math.floor((dateobj.valueOf() - firstDay.valueOf()) / 86400000); return Math.floor(d / 7) + 1; }// 获取某年的第一天function GetFirstWeekBegDay(year) { var tempdate = new Date(year, 0, 1); var temp = tempdate.getDay(); if (temp == 1){ return tempdate; } temp = temp == 0 7 : temp; tempdate = tempdate.setDate(tempdate.getDate() + (8 - temp)); return new Date(tempdate); }","link":"/2017/03/28/%E5%89%8D%E7%AB%AF/2017-03-28_js%20Date%E5%AF%B9%E8%B1%A1%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"title":"css鼠标移上去图片放大效果","text":"先手写，后期可以引入动画库，动画库待研究。。 12345678910111213141516171819202122232425262728img { width:100px; height:100px; transition: all 0.5s; -moz-transition: all 0.5s; /* Firefox 4 */ -webkit-transition: all 0.5s; /* Safari 和 Chrome */ -o-transition: all 0.5s; /* Opera */}img:hover { transform: scale(1.1); -ms-transform: scale(1.1); /* IE 9 */ -moz-transform: scale(1.1); /* Firefox */ -webkit-transform: scale(1.1); /* Safari 和 Chrome */ -o-transform: scale(1.1);} transform: all 0.5; all指的是width 和 height 同时变换，变换时间为0.5s, transform: scale(1.1)指在原来的基础上放大1.1倍；","link":"/2017/10/25/%E5%89%8D%E7%AB%AF/2017-10-25_css%E9%BC%A0%E6%A0%87%E7%A7%BB%E4%B8%8A%E5%8E%BB%E5%9B%BE%E7%89%87%E6%94%BE%E5%A4%A7%E6%95%88%E6%9E%9C/"},{"title":"php define()与defined()函数区别","text":"有时经常混淆define() 和 defined(), 记录一下两者的用法。 define()常量类似变量，不同住处在于： 常量在设定之后，它的值无法更改 常量名不需要开头的美元符号$ 作用域不影响对常量的访问 常量值只能是字符串或者数字 语法：define(name,value,case_insensitive) 属性名 解释 name 必需，常量的名称 value 必需，设置常量的值 case_insensitive 可选，规定常量的名称是否对大小写敏感。若设置为 true，则对大小写不敏感。默认是 false（大小写敏感） 比如： 1234&lt;?php define(&quot;myWebsite&quot;,&quot;http://wuhaidong.me&quot;,true); echo constant(&quot;mywebsite&quot;); // constant()返回一个常量的值?&gt; 输出： http://wuhaidong.me defined()常量定义之后，可以用 defined() 函数来判断是否定义了某个常量。defined()函数是检查某常量是否存在，如果存在，则返回ture,否则，返回false 1234&lt;?php define(&quot;myWebsite&quot;,&quot;http://wuhaidong.me&quot;); echo defined(&quot;myWebsite&quot;);?&gt; 输出：true","link":"/2017/07/13/%E5%90%8E%E7%AB%AF/2017-07-13_php%20define()%E4%B8%8Edefined()%E5%87%BD%E6%95%B0%E5%8C%BA%E5%88%AB/"},{"title":"css兼容IE低版本","text":"IE6，IE7，IE8, 兼容的css hack，IE的兼容真的很恶心 123456.bg-color{ background-color: #CC00FF; /*所有浏览器都会显示为紫色*/ background-color: #FF0000\\9; /*IE6、IE7、IE8会显示红色*/ *background-color: #0066FF; /*IE6、IE7会变为蓝色*/ _background-color: #009933; /*IE6会变为绿色*/} 好多css hack，最重要的是简单实用能解决问题就行了 总结： \\9： IE6 IE7 IE8 *： IE6 IE7 _： IE6 *+： IE7","link":"/2017/12/11/%E5%89%8D%E7%AB%AF/2017-12-11_css%E5%85%BC%E5%AE%B9IE%E4%BD%8E%E7%89%88%E6%9C%AC/"},{"title":"你年纪轻轻怎么这么不讲理","text":"今天在公交上遇到一出“精彩的打戏”，这给我的12月份带来了一丝的“惊喜”，1号就能让我碰到这样的事，看来这个月会惊喜不断啊！！！！ 这精彩的戏是这样的，公交到了一个站以后，上来三个人，一对中年夫妇，一个年轻的帅哥。这时中年男子和年轻的帅哥一起来到后面的座位区，但后面只有两个座位，中年男子就站在座位外面用手抓住座位扶手拦住年轻的帅哥不让他坐，说有人坐了，年轻小伙看他这样做可能就有点不爽了，就硬是挤进座位，这时中年男子就爆粗口：cnm，（这里是个文明用语的地方，偷笑中。。。），年轻帅哥就霸气的回了一句：“你再骂一句”。这时我在想两种结局，一是中年男子不骂了，二是中年男子骂了年轻帅哥也只是回骂。但人总说一般的剧情都不会往自己想象的那样发展，中年男子又来了一句cnm，而且声音更大，年轻小伙顿时火了，跳上去就是干，我离他们开打得地方中间隔着一个哥们，这哥们看他们开打直接就跑了。这时在前面跟乘务员找零的中年妇女才反应过来，就赶紧跑上来拉着年轻的小伙，小伙强壮的身材能一个顶两，但我佩服他的是任凭中年妇女怎么拉他怎么拽他他都不动那个中年妇女一个小指头，只是说你不要动我。后来乘务员上来拉架还有旁边几个人一起拉架才慢慢停下来。停下来之后，中年妇女坐在了我旁边的座位（刚才跑的那位哥们在前面站着了），坐在那里就数落年轻小伙，“你年纪轻轻的怎么这么不讲道理”、“看你也不像这样的人啊”，年轻帅哥也不直接回她，只说：“不和女人吵架，还骂妈了，谁不是妈生的。中年男子自停戏以后就没再说话了，估计是被打老实了。 这出戏的全过程我看的也算是清楚的，我也不能说谁对谁错，但如果我是中年男子，我不会去拦着座位不让人家坐更不能骂人，而且还是骂别人妈。但如果要在这种情景下选当一个人的话我愿当年轻的帅哥，一是公交座位谁都坐的，大家都是健康的人，如果你真是身体不适的话你可以跟别人说一下，一般人家都会愿意让座的，没必要拦着，这很容易引起别人的愤怒的；二是年轻小伙不打女人，尽量不和女生有争论；三是小伙全程没骂人，即使是中年男子多次辱骂；四是在第二次骂妈的时候，冲上去干，换做我也会冲上干，骂我随你怎么骂，但骂到我妈我干不过你我也冲上去。 （没有照暴，不敢拍，怕被打，dog.jpg）","link":"/2016/12/01/%E5%93%81%E7%94%9F%E6%B4%BB/2016-12-01_%E4%BD%A0%E5%B9%B4%E7%BA%AA%E8%BD%BB%E8%BD%BB%E6%80%8E%E4%B9%88%E8%BF%99%E4%B9%88%E4%B8%8D%E8%AE%B2%E7%90%86/"},{"title":"git版本控制管理工具学习记录","text":"在公司用git管理代码一段时间了，记录一下学习过程。 版本回退 HEAD 指向的版本是当前版本，git允许我们在各历史版本中来回切换，使用命令：git reset –hard commit_id 命令git log 查看提交日志 命令git reflog查看命令历史日志，这样可以查看你所有的命令操作日志 工作区与暂存区 git中有工作区（working place）与暂存区的概念，在工作区中完成工作后， 使用命令git add 把在工作区完成的文件提交到“暂存区”，然后使用命令git commit 把暂存区的所有 内容提交到当前分支。注意：git commit 只负责把暂存区的修改提交，所有修改过的内容一定要经过git add提交到攒出区， 然后再经过git commit 才能被提交。 git status 可以查看工作区和暂存区内容的状态 git checkout – file 把file文件在工作区的修改全部撤销，就是让这个文件回到最后一次git commit 或者 git add时的状态 git rm 用于删除文件，如果文件已经被提交到文件库，那么你永远也不用担心误删 远程仓库 创建ssh key 使用命令ssh-keygen -t rsa -C “youremail@example.com“ ，这时会在目录下面生成.ssh目录，，里面 有id_rsa和id_rsa.pub两个文件，id_rsa是私钥，id_rsa.pub是公钥 登录github,打开SSH and GPG keys,点击new SSH key ，填上title，在key文本框中粘贴id_rsa.pub文件的内容。 添加远程库，在github创建库后，这个库还是空的，要在本地库下运行命令： git remote add origin git@github.com:whd88188/learngit.git（learngit是库名） 下一步就可以把本地库的内容推送到远程库了，使用命令：git push -u origin master（第一次推送），之后的话用 git push origin master 分支管理 git branch 查看分支 git branch branch_name 创建分支 git checkout branch_name 切换分支 git checkout -b branch_name 创建并切换分支 git merge branch_name 合并某分支到当前分支 git branch -d branch_name 删除分支 git log –graph 可以看到分支合并图，git无法合并分支时，要先解决，然后提交载合并，用，如图： 多人合作： master 分支是主分支，因此要时刻与远程同步; dev 分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步; bug 分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug; feature 分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。 标签管理 先切换到需要打标签的分支 git tag tag_name 创建一个标签 git tag -a tag_name -m “blablabla…” 可以指定标签信息 git tag 查看所有标签 学习教程：廖雪峰老师的git教程","link":"/2017/04/20/%E5%B7%A5%E5%85%B7/2017-04-20_git%E7%89%88%E6%9C%AC%E6%8E%A7%E5%88%B6%E7%AE%A1%E7%90%86%E5%B7%A5%E5%85%B7%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"},{"title":"Markdown编写语法例子","text":"因为平时写文档和博客都是用markdown，经常需要查看markdown语法，所以把常用的markdown语法的记录下来，方便使用，后续会持续更新。 标题语法： 12345# 一级标题## 二级标题### 三级标题#### 四级标题##### 五级标题 效果： 一级标题二级标题三级标题四级标题五级标题 文本语法： 12345678910111213141516&lt;font color='#ff0000'&gt;字体颜色&lt;/font&gt; ~~删除线~~ &lt;u&gt;下划线&lt;u&gt;*斜线* **粗体**&lt;small&gt;小号字体&lt;/small&gt;&lt;big&gt;大号字体&lt;/big&gt; 效果： 字体颜色 删除线 下划线 斜线 粗体 小号字体 大号字体 引号语法 123&gt; 引号-第一层&gt;&gt;第二层&gt;&gt;&gt;第三层 效果： 引号-第一层 第二层 第三层 序号语法： 12345* 无序列表1* 无序列表11. 有序列表12. 有序列表1 效果： 无序列表1 无序列表1 有序列表1 有序列表1 待办语法： 12* [ ] 待办-未完成* [x] 待办-已完成 效果： 待办-未完成 待办-已完成 链接语法： 1234[链接](https://note.youdao.com/)图片![image](https://note.youdao.com/favicon.ico) 效果：链接 图片 代码语法： 12345`内嵌代码-行````javascript内嵌代码-块js 效果： 内嵌代码-行 12内嵌代码-块js 表格语法： 123| 右对齐 | 左对齐 | 居中对齐 | 没设置 || ---: | :--- | :---: |--- || 单元格1 | 单元格2 |单元格3 |单元格4 | 效果： 右对齐 左对齐 居中对齐 没设置 单元格1 单元格2 单元格3 单元格4 数据公式语法： 12```mathE = mc^2 效果： 1E = mc^2 化学公式待补充 流程图待补充 时序图待补充 甘特图待补充 类图待补充 E-R图待补充 饼图待补充","link":"/2018/08/20/%E5%B7%A5%E5%85%B7/2018-08-20_Markdown%E7%BC%96%E5%86%99%E8%AF%AD%E6%B3%95%E4%BE%8B%E5%AD%90/"},{"title":"使用hexo搭建个人博客","text":"之前写博客都是在博客园上写，最近想搭建一个自己的博客系统，做了一下调研后，最终选择了hexo。 安装前准备先安装node 和 git 安装 hero-cli1npm install hexo-cli -g 安装完成后查看hexo是否成功 1hexo -v 如下图则安装hexo-cli成功 初始化hexo项目123hexo init hexo-appcd hexo-appnpm install 初始化完项目后，项目目录结构如下图 项目命令先看package.json的命令： 命令解释如下： 1234567891011# 生成静态文件yarn build# 清除build时生成的静态文件yarn clean# 发布命令，会执行 _config.yml文件中的deploy配置yarn deploy# 本地开发预览，默认端口4000，加 -p 5000 表示把端口改为5000yarn server 创建文章在项目根目录执行以下命令： 1hexo new &quot;post-name&quot; 设置主题hexo有非常丰富是的开源主题，有很多stars很多的主题：https://github.com/Ailln/awesome-hexo-theme?tab=readme-ov-file 经对比主题最终选择了hexo-theme-icarus，安装命令如下： 1234# 安装icarus主题npm install hexo-theme-icarus# 主题配置为icarushexo config theme icarus 也可手动在 _config.yml文件中配置 1theme: icarus icarus默认主题需要改造成自己想要的，主题改造原则：清晰、干净、易操作。修改细项如下：1、去掉很多不需要的或者需要插件的，比如链接、分享、打赏等，不重要的内容也可以去掉，首页归档、最近文章等；2、调换标签、分类等位置；3、布局调整，首页两列布局，文章详情页3列布局，文章目录固定在右边，方便操作和预览。 改造完成后页面如下图： 部署虚拟机部署我购买了虚拟机和域名wuhaidong.me（因为不能备案没继续续费了，已迁移到github pages） 打包执行打包命令： 1npm run build 执行完命令后，根目录下生成了public文件夹，将public文件夹复制到虚拟机的根目录下，然后在虚拟机的www目录下, nginx配置如下： 1234567server { listen 80; server_name wuhaidong.me; root /var/www/public; index index.html;} 域名解析登录阿里云，在域名解析中添加A记录，记录值为虚拟机的IP地址，解析成功后，访问域名wuhaidong.me，即可访问到博客。 github pages 部署1、在github新建一个仓库，仓库名：wubajiao.github.io，仓库地址为https://github.com/wubajiao/wubajiao.github.io2、安装 hexo-deployer-git3、在 _config.yml 中添加以下配置（如果配置已经存在，请将其替换为如下）: 1234deploy: type: git repo: https://github.com/wubajiao/wubajiao.github.io branch: gh-pages 4、deploy执行命令改为： 1hexo clean &amp;&amp; hexo deploy 5、执行deploy命令后如下图则表示成功： 5、打开https://wubajiao.github.io 至此，博客搭建基本完成，后期会把博客内容更新到https://wubajiao.github.io","link":"/2018/06/28/%E5%89%8D%E7%AB%AF/2018-06-28_%E4%BD%BF%E7%94%A8hexo%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"},{"title":"开启mysql远程访问权限","text":"mysql-server 出于安全方面考虑只允许本机(localhost, 127.0.0.1)来连接访问， 这对于 web-server 与 mysql-server 都在同一台服务器上的网站架构来说是没有问题的， 但随着网站流量的增加，后期服务器架构可能会将 web-server 与 mysql-server 分别放在独立的服务器上， 以便得到更大性能的提升， 这样其他节点的web-server就不能链接到mysql，或者是我们用一些mysql可视化管理工具远程连接也连接不了的，此时 mysql 就要修改成允许进行远程连接。 登录mysql123mysql -u root -p# 输入密码 修改mysql用户配置1234# 切换到mysql DBmysql&gt; use mysql # 查看现有用户,密码及允许连接的主机 mysql&gt; SELECT User, Password, Host FROM user; 从上图我们可以看到可链接用户列表、密码及可链接host 下面我们另外添加一个新的 root 用户, 密码为空, 只允许 192.168.0.68 连接,命令如下: 1mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'root'@'192.168.0.68' IDENTIFIED BY '' WITH GRANT OPTION; 然后我们在看一下用户列表，可以看到我们添加的信息 当然 @’192.168.0.68’可以替换为@‘%’就可任意ip访问 1mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '' WITH GRANT OPTION; 实际应用当中我们一定要设置密码哈！！！ 添加完用户后要推送设置到内存12# 这一步很重要哦mysql&gt; flush privileges; 2022/08/11 更新mysql 8.0.3版本： 12# 查看表的权限mysql&gt; select host,user,plugin,authentication_string from mysql.user; 12# 更新权限:mysql&gt; alter user 'root'@'localhost' identified with mysql_native_password by '****'; # ****是数据库密码","link":"/2018/04/18/%E6%95%B0%E6%8D%AE%E5%BA%93/2018-04-18_%E5%BC%80%E5%90%AFmysql%E8%BF%9C%E7%A8%8B%E8%AE%BF%E9%97%AE%E6%9D%83%E9%99%90/"},{"title":"Linux指令大全","text":"作为一个小前端，以前有我们的运维大神在的时候，要给服务器做什么配置的时候就找他（那时幸福到哭），如今他走了，公司也没招人（想把这个钱省下来，让我发现了，毕竟我能当小运维用，虽然很这方面很渣渣，哈哈，偷笑中。。。），所以只能自给自足了，每次要用到linux指令的时候，都要查去一下，为了以后能够方便快速使用，自己也把linux指令整理了一下。 文件和目录cd /home 进入 ‘/ home’ 目录’cd .. 返回上一级目录cd ../.. 返回上两级目录cd 进入个人的主目录cd ~user1 进入个人的主目录cd - 返回上次所在的目录pwd 显示工作路径ls 查看目录中的文件ls -F 查看目录中的文件ls -l 显示文件和目录的详细资料ls -a 显示隐藏文件ls [0-9] 显示包含数字的文件名和目录名tree 显示文件和目录由根目录开始的树形结构(1)lstree 显示文件和目录由根目录开始的树形结构(2)mkdir dir1 创建一个叫做 ‘dir1’ 的目录’mkdir dir1 dir2 同时创建两个目录mkdir -p /tmp/dir1/dir2 创建一个目录树rm -f file1 删除一个叫做 ‘file1’ 的文件’rmdir dir1 删除一个叫做 ‘dir1’ 的目录’rm -rf dir1 删除一个叫做 ‘dir1’ 的目录并同时删除其内容rm -rf dir1 dir2 同时删除两个目录及它们的内容mv dir1 new_dir 重命名/移动 一个目录cp file1 file2 复制一个文件cp dir/* . 复制一个目录下的所有文件到当前工作目录cp -a /tmp/dir1 . 复制一个目录到当前工作目录cp -a dir1 dir2 复制一个目录ln -s file1 lnk1 创建一个指向文件或目录的软链接ln file1 lnk1 创建一个指向文件或目录的物理链接touch -t 0712250000 file1 修改一个文件或目录的时间戳 - (YYMMDDhhmm)file file1 outputs the mime type of the file as text iconv -l 列出已知的编码 关机 (系统的关机、重启以及登出 )shutdown -h now 关闭系统(1)init 0 关闭系统(2)telinit 0 关闭系统(3)shutdown -h hours:minutes &amp; 按预定时间关闭系统shutdown -c 取消按预定时间关闭系统shutdown -r now 重启(1)reboot 重启(2)logout 注销 系统信息arch 显示机器的处理器架构(1)uname -m 显示机器的处理器架构(2)uname -r 显示正在使用的内核版本dmidecode -q 显示硬件系统部件 - (SMBIOS / DMI)hdparm -i /dev/hda 罗列一个磁盘的架构特性hdparm -tT /dev/sda 在磁盘上执行测试性读取操作cat /proc/cpuinfo 显示CPU info的信息cat /proc/interrupts 显示中断cat /proc/meminfo 校验内存使用cat /proc/swaps 显示哪些swap被使用cat /proc/version 显示内核的版本cat /proc/net/dev 显示网络适配器及统计cat /proc/mounts 显示已加载的文件系统lspci -tv 罗列 PCI 设备lsusb -tv 显示 USB 设备date 显示系统日期cal 2007 显示2007年的日历表date 041217002007.00 设置日期和时间 - 月日时分年.秒clock -w 将时间修改保存到 BIOS 文件搜索find / -name file1 从 ‘/‘ 开始进入根文件系统搜索文件和目录find / -user user1 搜索属于用户 ‘user1’ 的文件和目录find /home/user1 -name *.bin 在目录 ‘/ home/user1’ 中搜索带有’.bin’ 结尾的文件find /usr/bin -type f -atime +100 搜索在过去100天内未被使用过的执行文件find /usr/bin -type f -mtime -10 搜索在10天内被创建或者修改过的文件find / -name *.rpm -exec chmod 755 ‘{}’ ; 搜索以 ‘.rpm’ 结尾的文件并定义其权限find / -xdev -name *.rpm 搜索以 ‘.rpm’ 结尾的文件，忽略光驱、捷盘等可移动设备locate *.ps 寻找以 ‘.ps’ 结尾的文件 - 先运行 ‘updatedb’ 命令whereis halt 显示一个二进制文件、源码或man的位置which halt 显示一个二进制文件或可执行文件的完整路径 挂载一个文件系统mount /dev/hda2 /mnt/hda2 挂载一个叫做hda2的盘 - 确定目录 ‘/ mnt/hda2’ 已经存在umount /dev/hda2 卸载一个叫做hda2的盘 - 先从挂载点 ‘/ mnt/hda2’ 退出fuser -km /mnt/hda2 当设备繁忙时强制卸载umount -n /mnt/hda2 运行卸载操作而不写入 /etc/mtab 文件- 当文件为只读或当磁盘写满时非常有用mount /dev/fd0 /mnt/floppy 挂载一个软盘mount /dev/cdrom /mnt/cdrom 挂载一个cdrom或dvdrommount /dev/hdc /mnt/cdrecorder 挂载一个cdrw或dvdrommount /dev/hdb /mnt/cdrecorder 挂载一个cdrw或dvdrommount -o loop file.iso /mnt/cdrom 挂载一个文件或ISO镜像文件mount -t vfat /dev/hda5 /mnt/hda5 挂载一个Windows FAT32文件系统mount /dev/sda1 /mnt/usbdisk 挂载一个usb 捷盘或闪存设备mount -t smbfs -o username=user,password=pass //WinClient/share /mnt/share 挂载一个windows网络共享 用户和群组groupadd group_name 创建一个新用户组groupdel group_name 删除一个用户组groupmod -n new_group_name old_group_name 重命名一个用户组useradd -c “Name Surname “ -g admin -d /home/user1 -s /bin/bash user1 创建一个属于 “admin” 用户组的用户useradd user1 创建一个新用户userdel -r user1 删除一个用户 ( ‘-r’ 排除主目录)usermod -c “User FTP” -g system -d /ftp/user1 -s /bin/nologin user1 修改用户属性passwd 修改口令passwd user1 修改一个用户的口令 (只允许root执行)chage -E 2005-12-31 user1 设置用户口令的失效期限pwck 检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的用户grpck 检查 ‘/etc/passwd’ 的文件格式和语法修正以及存在的群组newgrp group_name 登陆进一个新的群组以改变新创建文件的预设群组 磁盘空间df -h 显示已经挂载的分区列表ls -lSr |more 以尺寸大小排列文件和目录du -sh dir1 估算目录 ‘dir1’ 已经使用的磁盘空间’du -sk * | sort -rn 以容量大小为依据依次显示文件和目录的大小rpm -q -a –qf ‘%10{SIZE}t%{NAME}n’ | sort -k1,1n 以大小为依据依次显示已安装的rpm包所使用的空间 (fedora, redhat类系统)dpkg-query -W -f=’${Installed-Size;10}t${Package}n’ | sort -k1,1n 以大小为依据显示已安装的deb包所使用的空间 (ubuntu, debian类系统) 文件的权限 - 使用 “+” 设置权限，使用 “-“ 用于取消ls -lh 显示权限ls /tmp | pr -T5 -W$COLUMNS 将终端划分成5栏显示chmod ugo+rwx directory1 设置目录的所有人(u)、群组(g)以及其他人(o)以读（r ）、写(w)和执行(x)的权限chmod go-rwx directory1 删除群组(g)与其他人(o)对目录的读写执行权限chown user1 file1 改变一个文件的所有人属性chown -R user1 directory1 改变一个目录的所有人属性并同时改变改目录下所有文件的属性chgrp group1 file1 改变文件的群组chown user1:group1 file1 改变一个文件的所有人和群组属性find / -perm -u+s 罗列一个系统中所有使用了SUID控制的文件chmod u+s /bin/file1 设置一个二进制文件的 SUID 位 - 运行该文件的用户也被赋予和所有者同样的权限chmod u-s /bin/file1 禁用一个二进制文件的 SUID位chmod g+s /home/public 设置一个目录的SGID 位 - 类似SUID ，不过这是针对目录的chmod g-s /home/public 禁用一个目录的 SGID 位chmod o+t /home/public 设置一个文件的 STIKY 位 - 只允许合法所有人删除文件chmod o-t /home/public 禁用一个目录的 STIKY 位 打包和压缩文件bunzip2 file1.bz2 解压一个叫做 ‘file1.bz2’的文件bzip2 file1 压缩一个叫做 ‘file1’ 的文件gunzip file1.gz 解压一个叫做 ‘file1.gz’的文件gzip file1 压缩一个叫做 ‘file1’的文件gzip -9 file1 最大程度压缩rar a file1.rar test_file 创建一个叫做 ‘file1.rar’ 的包rar a file1.rar file1 file2 dir1 同时压缩 ‘file1’, ‘file2’ 以及目录 ‘dir1’rar x file1.rar 解压rar包unrar x file1.rar 解压rar包tar -cvf archive.tar file1 创建一个非压缩的 tarballtar -cvf archive.tar file1 file2 dir1 创建一个包含了 ‘file1’, ‘file2’ 以及 ‘dir1’的档案文件tar -tf archive.tar 显示一个包中的内容tar -xvf archive.tar 释放一个包tar -xvf archive.tar -C /tmp 将压缩包释放到 /tmp目录下tar -cvfj archive.tar.bz2 dir1 创建一个bzip2格式的压缩包tar -xvfj archive.tar.bz2 解压一个bzip2格式的压缩包tar -cvfz archive.tar.gz dir1 创建一个gzip格式的压缩包tar -xvfz archive.tar.gz 解压一个gzip格式的压缩包zip file1.zip file1 创建一个zip格式的压缩包zip -r file1.zip file1 file2 dir1 将几个文件和目录同时压缩成一个zip格式的压缩包unzip file1.zip 解压一个zip格式压缩包 文件的特殊属性 - 使用 “+” 设置权限，使用 “-“ 用于取消chattr +a file1 只允许以追加方式读写文件chattr +c file1 允许这个文件能被内核自动压缩/解压chattr +d file1 在进行文件系统备份时，dump程序将忽略这个文件chattr +i file1 设置成不可变的文件，不能被删除、修改、重命名或者链接chattr +s file1 允许一个文件被安全地删除chattr +S file1 一旦应用程序对这个文件执行了写操作，使系统立刻把修改的结果写到磁盘chattr +u file1 若文件被删除，系统会允许你在以后恢复这个被删除的文件lsattr 显示特殊的属性 RPM 包 - （Fedora, Redhat及类似系统）rpm -ivh package.rpm 安装一个rpm包rpm -ivh –nodeeps package.rpm 安装一个rpm包而忽略依赖关系警告rpm -U package.rpm 更新一个rpm包但不改变其配置文件rpm -F package.rpm 更新一个确定已经安装的rpm包rpm -e package_name.rpm 删除一个rpm包rpm -qa 显示系统中所有已经安装的rpm包rpm -qa | grep httpd 显示所有名称中包含 “httpd” 字样的rpm包rpm -qi package_name 获取一个已安装包的特殊信息rpm -qg “System Environment/Daemons” 显示一个组件的rpm包rpm -ql package_name 显示一个已经安装的rpm包提供的文件列表rpm -qc package_name 显示一个已经安装的rpm包提供的配置文件列表rpm -q package_name –whatrequires 显示与一个rpm包存在依赖关系的列表rpm -q package_name –whatprovides 显示一个rpm包所占的体积rpm -q package_name –scripts 显示在安装/删除期间所执行的脚本lrpm -q package_name –changelog 显示一个rpm包的修改历史rpm -qf /etc/httpd/conf/httpd.conf 确认所给的文件由哪个rpm包所提供rpm -qp package.rpm -l 显示由一个尚未安装的rpm包提供的文件列表rpm –import /media/cdrom/RPM-GPG-KEY 导入公钥数字证书rpm –checksig package.rpm 确认一个rpm包的完整性rpm -qa gpg-pubkey 确认已安装的所有rpm包的完整性rpm -V package_name 检查文件尺寸、 许可、类型、所有者、群组、MD5检查以及最后修改时间rpm -Va 检查系统中所有已安装的rpm包- 小心使用rpm -Vp package.rpm 确认一个rpm包还未安装rpm2cpio package.rpm | cpio –extract –make-directories bin 从一个rpm包运行可执行文件rpm -ivh /usr/src/redhat/RPMS/arch/package.rpm 从一个rpm源码安装一个构建好的包rpmbuild –rebuild package_name.src.rpm 从一个rpm源码构建一个 rpm 包 YUM 软件包升级器 - （Fedora, RedHat及类似系统）yum install package_name 下载并安装一个rpm包yum localinstall package_name.rpm 将安装一个rpm包，使用你自己的软件仓库为你解决所有依赖关系yum update package_name.rpm 更新当前系统中所有安装的rpm包yum update package_name 更新一个rpm包yum remove package_name 删除一个rpm包yum list 列出当前系统中安装的所有包yum search package_name 在rpm仓库中搜寻软件包yum clean packages 清理rpm缓存删除下载的包yum clean headers 删除所有头文件yum clean all 删除所有缓存的包和头文件 DEB 包 (Debian, Ubuntu 以及类似系统)dpkg -i package.deb 安装/更新一个 deb 包dpkg -r package_name 从系统删除一个 deb 包dpkg -l 显示系统中所有已经安装的 deb 包dpkg -l | grep httpd 显示所有名称中包含 “httpd” 字样的deb包dpkg -s package_name 获得已经安装在系统中一个特殊包的信息dpkg -L package_name 显示系统中已经安装的一个deb包所提供的文件列表dpkg –contents package.deb 显示尚未安装的一个包所提供的文件列表dpkg -S /bin/ping 确认所给的文件由哪个deb包提供 APT 软件工具 (Debian, Ubuntu 以及类似系统)apt-get install package_name 安装/更新一个 deb 包apt-cdrom install package_name 从光盘安装/更新一个 deb 包apt-get update 升级列表中的软件包apt-get upgrade 升级所有已安装的软件apt-get remove package_name 从系统删除一个deb包apt-get check 确认依赖的软件仓库正确apt-get clean 从下载的软件包中清理缓存apt-cache search searched-package 返回包含所要搜索字符串的软件包名称 网络 - （以太网和WIFI无线）ifconfig eth0 显示一个以太网卡的配置ifup eth0 启用一个 ‘eth0’ 网络设备ifdown eth0 禁用一个 ‘eth0’ 网络设备ifconfig eth0 192.168.1.1 netmask 255.255.255.0 控制IP地址ifconfig eth0 promisc 设置 ‘eth0’ 成混杂模式以嗅探数据包 (sniffing)dhclient eth0 以dhcp模式启用 ‘eth0’ 光盘cdrecord -v gracetime=2 dev=/dev/cdrom -eject blank=fast -force 清空一个可复写的光盘内容mkisofs /dev/cdrom &gt; cd.iso 在磁盘上创建一个光盘的iso镜像文件mkisofs /dev/cdrom | gzip &gt; cd_iso.gz 在磁盘上创建一个压缩了的光盘iso镜像文件mkisofs -J -allow-leading-dots -R -V “Label CD” -iso-level 4 -o ./cd.iso data_cd 创建一个目录的iso镜像文件cdrecord -v dev=/dev/cdrom cd.iso 刻录一个ISO镜像文件gzip -dc cd_iso.gz | cdrecord dev=/dev/cdrom - 刻录一个压缩了的ISO镜像文件mount -o loop cd.iso /mnt/iso 挂载一个ISO镜像文件cd-paranoia -B 从一个CD光盘转录音轨到 wav 文件中cd-paranoia – “-3” 从一个CD光盘转录音轨到 wav 文件中（参数-3）cdrecord –scanbus 扫描总线以识别scsi通道dd if=/dev/hdc | md5sum 校验一个设备的md5sum编码，例如一张 CD 备份dump -0aj -f /tmp/home0.bak /home 制作一个 ‘/home’ 目录的完整备份dump -1aj -f /tmp/home0.bak /home 制作一个 ‘/home’ 目录的交互式备份restore -if /tmp/home0.bak 还 原一个交互式备份rsync -rogpav –delete /home /tmp 同步两边的目录rsync -rogpav -e ssh –delete /home ip_address:/tmp 通过SSH通道rsyncrsync -az -e ssh –delete ip_addr:/home/public /home/local 通过ssh和压缩将一个远程目录同步到本地目录rsync -az -e ssh –delete /home/local ip_addr:/home/public 通过ssh和压缩将本地目录同步到远程目录dd bs=1M if=/dev/hda | gzip | ssh user@ip_addr ‘dd of=hda.gz’ 通过ssh在远程主机上执行一次备份本地磁盘的操作dd if=/dev/sda of=/tmp/file1 备份磁盘内容到一个文件tar -Puf backup.tar /home/user 执行一次对 ‘/home/user’ 目录的交互式备份操作( cd /tmp/local/ &amp;&amp; tar c . ) | ssh -C user@ip_addr ‘cd /home/share/ &amp;&amp; tar x -p’ 通过ssh在远程目录中复制一个目录内容( tar c /home ) | ssh -C user@ip_addr ‘cd /home/backup-home &amp;&amp; tar x -p’ 通过ssh在远程目录中复制一个本地目录tar cf - . | (cd /tmp/backup ; tar xf - ) 本地将一个目录复制到另一个地方，保留原有权限及链接find /home/user1 -name ‘.txt’ | xargs cp -av –target-directory=/home/backup/ –parents 从一个目录查找并复制所有以 ‘.txt’ 结尾的文件到另一个目录find /var/log -name ‘.log’ | tar cv –files-from=- | bzip2 &gt; log.tar.bz2 查找所有以 ‘.log’ 结尾的文件并做成一个bzip包dd if=/dev/hda of=/dev/fd0 bs=512 count=1 做一个将 MBR (Master Boot Record)内容复制到软盘的动作dd if=/dev/fd0 of=/dev/hda bs=512 count=1 从已经保存到软盘的备份中恢复MBR内容 SWAP文件系统mkswap /dev/hda3 创建一个swap文件系统swapon /dev/hda3 启用一个新的swap文件系统swapon /dev/hda2 /dev/hdb3 启用两个swap分区 查看文件内容cat file1 从第一个字节开始正向查看文件的内容tac file1 从最后一行开始反向查看一个文件的内容more file1 查看一个长文件的内容less file1 类似于 ‘more’ 命令，但是它允许在文件中和正向操作一样的反向操作head -2 file1 查看一个文件的前两行tail -2 file1 查看一个文件的最后两行tail -f /var/log/messages 实时查看被添加到一个文件中的内容 文本处理cat file1 | command( sed, grep, awk, grep, etc…) &gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个新文件中cat file1 | command( sed, grep, awk, grep, etc…) &gt;&gt; result.txt 合并一个文件的详细说明文本，并将简介写入一个已有的文件中grep Aug /var/log/messages 在文件 ‘/var/log/messages’中查找关键词”Aug”grep ^Aug /var/log/messages 在文件 ‘/var/log/messages’中查找以”Aug”开始的词汇grep [0-9] /var/log/messages 选择 ‘/var/log/messages’ 文件中所有包含数字的行grep Aug -R /var/log/* 在目录 ‘/var/log’ 及随后的目录中搜索字符串”Aug”sed ‘s/stringa1/stringa2/g’ example.txt 将example.txt文件中的 “string1” 替换成 “string2”sed ‘/^$/d’ example.txt 从example.txt文件中删除所有空白行sed ‘/ *#/d; /^$/d’ example.txt 从example.txt文件中删除所有注释和空白行echo ‘esempio’ | tr ‘[:lower:]’ ‘[:upper:]’ 合 并上下单元格内容sed -e ‘1d’ result.txt 从文件example.txt 中排除第一行sed -n ‘/stringa1/p’ 查看只包含词汇 “string1”的行sed -e ‘s/ $//‘ example.txt 删除每一行最后的空白字符sed -e ‘s/stringa1//g’ example.txt 从文档中只删除词汇 “string1” 并保留剩余全部sed -n ‘1,5p;5q’ example.txt 查看从第一行到第5行内容sed -n ‘5p;5q’ example.txt 查看第5行sed -e ‘s/00/0/g’ example.txt 用单个零替换多个零cat -n file1 标示文件的行数cat example.txt | awk ‘NR%2==1’ 删除example.txt文件中的所有偶数行echo a b c | awk ‘{print $1}’ 查看一行第一栏echo a b c | awk ‘{print $1,$3}’ 查看一行的第一和第三栏paste file1 file2 合并两个文件或两栏的内容paste -d ‘+’ file1 file2 合并两个文件或两栏的内容，中间用”+”区分sort file1 file2 排序两个文件的内容sort file1 file2 | uniq 取 出两个文件的并集(重复的行只保留一份)sort file1 file2 | uniq -u 删除交集，留下其他的行sort file1 file2 | uniq -d 取出两个文件的交集(只留下同时存在于两个文件中的文件)comm -1 file1 file2 比较两个文件的内容只删除 ‘file1’ 所包含的内容comm -2 file1 file2 比较两个文件的内容只删除 ‘file2’ 所包含的内容comm -3 file1 file2 比较两个文件的内容只删除两个文件共有的部分 字符设置和文件格式转换dos2unix filedos.txt fileunix.txt 将一个文本文件的格式从MSDOS转换成UNIXunix2dos fileunix.txt filedos.txt 将一个文本文件的格式从UNIX转换成MSDOSrecode ..HTML &lt; page.txt &gt; page.html 将一个文本文件转换成htmlrecode -l | more 显示所有允许的转换格式 文件系统分析badblocks -v /dev/hda1 检查磁盘hda1上的坏磁块fsck /dev/hda1 修复/检查hda1磁盘上linux文件系统的完整性fsck.ext2 /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性e2fsck /dev/hda1 修复/检查hda1磁盘上ext2文件系统的完整性e2fsck -j /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性fsck.ext3 /dev/hda1 修复/检查hda1磁盘上ext3文件系统的完整性fsck.vfat /dev/hda1 修复/检查hda1磁盘上fat文件系统的完整性fsck.msdos /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性dosfsck /dev/hda1 修复/检查hda1磁盘上dos文件系统的完整性 初始化一个文件系统mkfs /dev/hda1 在hda1分区创建一个文件系统mke2fs /dev/hda1 在hda1分区创建一个linux ext2的文件系统mke2fs -j /dev/hda1 在hda1分区创建一个linux ext3(日志型)的文件系统mkfs -t vfat 32 -F /dev/hda1 创建一个 FAT32 文件系统fdformat -n /dev/fd0 格式化一个软盘mkswap /dev/hda3 创建一个swap文件系统","link":"/2016/11/21/%E6%9C%8D%E5%8A%A1%E5%99%A8/2016-11-21_Linux%20%E6%8C%87%E4%BB%A4%E5%A4%A7%E5%85%A8/"},{"title":"嗯，今天买了个虚拟机","text":"今天心血来潮逛了一下阿里云，看到了不该看的，阿里云虚拟主机竟然在搞活动，唉，RMB又得被套了。共享虚拟主机0/年+什么查杀木马6元/年（也不知道这6块钱能杀多少木马），续费60元/年。 先看一下虚拟主机的配置：网页空间200M，数据库空间20M，月流量10G，这配置对于咱们小小的博客站来说应该是可以了。 买好后先测试一下，步骤如下： 在主机管理控制台绑定域名 绑定www.wuhaidong.me 和 wuhaidong.me 解析域名查看主机ip，取到ip地址去域名解析面板进行解析，解析完后进行第3步 ftp上传一个测试页面到主机的htdocs 目录下，链接成功，搞定！！！ 那共享虚拟主机能绑定一个这样的app.wuhaidong.me的二级域名吗？ 答案是肯定得，通过创建 .htaccess 文件绑定二级域名，比如要把app.wuhaidong.me二级域名绑定到app子目录下，那么.htaccess文件的代码如下： 123456789RewriteEngine OnRewriteCond %{HTTP_HOST} ^(www.)?app.wuhaidong.me$RewriteCond %{REQUEST_URI} !^/app/RewriteCond %{REQUEST_FILENAME} !-fRewriteCond %{REQUEST_FILENAME} !-dRewriteRule ^(.*)$ /app/$1RewriteCond %{HTTP_HOST} ^(www.)?app.wuhaidong.me$RewriteRule ^(/)?$ app/index.html [L]","link":"/2017/06/10/%E6%9C%8D%E5%8A%A1%E5%99%A8/2017-06-10_%E5%97%AF%EF%BC%8C%E4%BB%8A%E5%A4%A9%E4%B9%B0%E4%BA%86%E4%B8%AA%E8%99%9A%E6%8B%9F%E6%9C%BA/"},{"title":"js RegExp正则表达式的使用","text":"首先，正则表达式 这个东西是干嘛用的？比如我要判断用户输入的邮箱是否合法，或者我们想提取字符串里的某个特定字符，那么我们就可以用正则表达式来解决这些问题了。正则表达式是一种描述性的语言来给字符串定义一个规则，凡是符合规则的字符串就是匹配了，否则该字符串不合法。 匹配规则 \\d 匹配一个数字，如 ‘0a\\d’可匹配‘0a8’,不能匹配‘0aa’; ‘\\d\\d’可匹配’66’； \\w 匹配一个字母或者数字，如’0a\\w’既可匹配’0a8’,还可匹配‘0aa’; ‘\\w\\w\\w’可匹配’11a’,’aaa’ ； . 匹配任意字符，如’wh.’可匹配’whd’,’whx’,’wh!’,’wh8’等等； * 匹配任意个字符（包括0个）； + 匹配至少1个字符 ？匹配0或者1个字符 i忽略大小写匹配 m多行匹配 \\s 匹配一个空格（包括Tab等空白符） {n}匹配n个字符，’\\d{4}’匹配4个数字，比如’0755’ {n,m}匹配n-m个字符,’\\d{3,8}’可匹配3-8个数字，如’1234’,’123’,’12345678’ ; [] 表示范围匹配，这样可以做到更精准匹配，[0-9a-zA-Z_]+可以匹配至少由一个数字、字母或者下划线组成的字符串,比如’a9f’,’a_0’,’2017’; A|B 可以匹配A或B，所以’(J|j)s’可以匹配’Js’和’js’ ; ^表示行的开头，’^\\d’表示以数字开头； $表示行结束，’\\d$’表示以数字结束；js可以匹配’jsp’,加上’^js$’后只能匹配’js’了； ()表示分组； JavaScript正则表达式创建的方式有两种： 第一种是通过 /正则表达式/ 形式写出来， 第二种是通过new RegExp(‘正则表达式’)。两种方式是一样的： 1234567var re1 = /whd\\88188/;var re2 = new RegExp('whd\\\\88188'); // 注意这种方法需要转义，两个\\\\其实是一个\\re1; // /whd|88188/re2; // /whd|88188/ 如何判断正则表达式是否匹配1234567var re = /^\\d{4}\\-\\d{3-8}$/;re.test('0755-88188'); // truere.test('075-88188'); // falsere.test('0755-88188whd'); // false RegExp对象的test()方法用于检测字符串是否符合条件。 如何切割字符串split()方法用于切割字符串，切割例子如下： 1'w h d'.split(''); // ['w','','h','','d'] 发现没有，无法识别空格，来，加点正则表达式 1'w h d'.split(/\\s+/); // ['w','h','d'] 加上，；试试 1'w,h;; d'.split(/[\\s\\,\\;]+/); // ['w','h','d'] 可以用split()方法把不规范地输入转化为规范地输入。 如何提取子串用exec()方法提取子串，如我们要提取区号和本地号码 123var re = /^(\\d{4})-(\\d{3,8})$/;re.exec('0755-123456'); // ['0755-123456', '0755', '123456']re.exec('0755 123456'); // null exec()方法匹配成功后，回返回一个数组，第一个元素是正则表达式匹配到的整个字符串，后面是匹配成功的子串。 贪婪匹配正则表大式默认贪婪匹配，它会匹配尽可能多的字符，举个栗子，要匹配出数字后面所有的0 12var re = /^(\\d+)(0*)$/;re.exec('1023000'); // [&quot;1023000&quot;,&quot;1023000&quot;,&quot;&quot;] 因为 \\d+采用的是贪婪匹配，把’1023000’所有的数字都匹配了，结果0*匹配了空字符串，现在要不匹配所有数字，就得让\\d+变成非贪婪匹配，加？能实现 12var re = /^(\\d+？)(0*)$/;re.exec('1023000'); // [&quot;1023000&quot;,&quot;1023&quot;,&quot;000&quot;] 全局搜索g表示全局匹配 123var re1 = /whd88188/g ; var re2 = new RegExp('whd88188','g'); 这两种表达方式是等价的 全局匹配可以用exec()方法来搜索一个匹配的字符串，指定g标志后，每次运行exec(),正则表达式本身会更新lastIndex属性，表示上次匹配到的最后索引， 1234567891011121314151617var s = 'JavaScript, VBScript, JScript and ECMAScript';var re=/[a-zA-Z]+Script/g;// 使用全局匹配:re.exec(s); // ['JavaScript']re.lastIndex; // 10re.exec(s); // ['VBScript']re.lastIndex; // 20re.exec(s); // ['JScript']re.lastIndex; // 29re.exec(s); // ['ECMAScript']re.lastIndex; // 44re.exec(s); // null，直到结束仍没有匹配到 遇到经常过来回顾回顾……嗯，确定你过段时间还记得这篇文章？","link":"/2017/05/17/%E5%89%8D%E7%AB%AF/2017-05-17_js%20RegExp%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F%E7%9A%84%E4%BD%BF%E7%94%A8/"},{"title":"vi编辑器的几个常用命令","text":"之前整理的linux大全，但vi编辑器的命令没整理到，久了之后就忘了，整理一下方便以后查阅。 123456789101112131415# 用vi打开filename文件vi filename# 在打开文件后按i进入命令编辑模式，不按i是进不了编辑状态的i # 按 ESC 键 跳到命令编辑模式，然后：:w 保存文件但不退出vi:w file 将修改另外保存到file中，不退出vi:w! 强制保存，不退出vi:wq 保存文件并退出vi:wq! 强制保存文件，并退出vi:q 不保存文件，退出vi:q! 不保存文件，强制退出vi:e! 放弃所有修改，从上次保存文件开始再编辑","link":"/2018/03/11/%E6%9C%8D%E5%8A%A1%E5%99%A8/2018-03-11_vi%E7%BC%96%E8%BE%91%E5%99%A8%E7%9A%84%E5%87%A0%E4%B8%AA%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"}],"tags":[{"name":"js","slug":"js","link":"/tags/js/"},{"name":"规范","slug":"规范","link":"/tags/%E8%A7%84%E8%8C%83/"},{"name":"css","slug":"css","link":"/tags/css/"},{"name":"php","slug":"php","link":"/tags/php/"},{"name":"生活","slug":"生活","link":"/tags/%E7%94%9F%E6%B4%BB/"},{"name":"git","slug":"git","link":"/tags/git/"},{"name":"Markdown","slug":"Markdown","link":"/tags/Markdown/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"mysql","slug":"mysql","link":"/tags/mysql/"},{"name":"linux","slug":"linux","link":"/tags/linux/"},{"name":"虚拟机","slug":"虚拟机","link":"/tags/%E8%99%9A%E6%8B%9F%E6%9C%BA/"}],"categories":[{"name":"前端","slug":"前端","link":"/categories/%E5%89%8D%E7%AB%AF/"},{"name":"后端","slug":"后端","link":"/categories/%E5%90%8E%E7%AB%AF/"},{"name":"品生活","slug":"品生活","link":"/categories/%E5%93%81%E7%94%9F%E6%B4%BB/"},{"name":"工具","slug":"工具","link":"/categories/%E5%B7%A5%E5%85%B7/"},{"name":"数据库","slug":"数据库","link":"/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"},{"name":"服务器","slug":"服务器","link":"/categories/%E6%9C%8D%E5%8A%A1%E5%99%A8/"}],"pages":[]}